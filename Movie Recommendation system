{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10540001,"sourceType":"datasetVersion","datasetId":6521557},{"sourceId":10540079,"sourceType":"datasetVersion","datasetId":6521603}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dirgham/2-movie-recommendation-system?scriptVersionId=218720936\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Movie Recommendation System ","metadata":{}},{"cell_type":"markdown","source":"# Background and Approach","metadata":{}},{"cell_type":"markdown","source":"* In this notebook, we will focus on creating a movie recommendation system using the machine learning algorithm and Python code\n* There are two main kinds of filtering while we create a movie recommendation system\n* Content based filtering - it considers the characteristics of products and user profile\n* Collaborative filtering - it generates recommendation based on the user behaviour and preferences\n* Sometimes mixed approach is also taken in order to improve user experience, user involvement and corporate expansion\n* Content-based filtering is a supervised machine learning technique which is used to induce a classifer to discriminate between interesting and uninteresting items for the user\n* Collaborative filtering recommends items based on similiarity measures between users or items ","metadata":{}},{"cell_type":"markdown","source":"# Importing libraries","metadata":{}},{"cell_type":"code","source":"# Importing libraries \nimport numpy as np \nimport pandas as pd \nimport sklearn \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport warnings\nwarnings.simplefilter(action='ignore',category=FutureWarning)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:15:16.202575Z","iopub.execute_input":"2025-01-22T07:15:16.203167Z","iopub.status.idle":"2025-01-22T07:15:19.638255Z","shell.execute_reply.started":"2025-01-22T07:15:16.203136Z","shell.execute_reply":"2025-01-22T07:15:19.636981Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"# Loading Datasets","metadata":{}},{"cell_type":"code","source":"ratings = pd.read_csv(\"/kaggle/input/ratings/ratings.csv\")\nratings.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:57:48.121668Z","iopub.execute_input":"2025-01-22T07:57:48.122127Z","iopub.status.idle":"2025-01-22T07:57:48.193419Z","shell.execute_reply.started":"2025-01-22T07:57:48.122092Z","shell.execute_reply":"2025-01-22T07:57:48.192203Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"   userId  movieId  rating  timestamp\n0       1        1     4.0  964982703\n1       1        3     4.0  964981247\n2       1        6     4.0  964982224\n3       1       47     5.0  964983815\n4       1       50     5.0  964982931","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4.0</td>\n      <td>964982703</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>964981247</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>964982224</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>5.0</td>\n      <td>964983815</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>5.0</td>\n      <td>964982931</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"movies = pd.read_csv(\"/kaggle/input/recommendation-system/movies.csv\")\nmovies.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:57:56.2122Z","iopub.execute_input":"2025-01-22T07:57:56.212578Z","iopub.status.idle":"2025-01-22T07:57:56.242134Z","shell.execute_reply.started":"2025-01-22T07:57:56.212551Z","shell.execute_reply":"2025-01-22T07:57:56.240942Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"   movieId                               title  \\\n0        1                    Toy Story (1995)   \n1        2                      Jumanji (1995)   \n2        3             Grumpier Old Men (1995)   \n3        4            Waiting to Exhale (1995)   \n4        5  Father of the Bride Part II (1995)   \n\n                                        genres  \n0  Adventure|Animation|Children|Comedy|Fantasy  \n1                   Adventure|Children|Fantasy  \n2                               Comedy|Romance  \n3                         Comedy|Drama|Romance  \n4                                       Comedy  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n      <td>Adventure|Children|Fantasy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n      <td>Comedy|Romance</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n      <td>Comedy|Drama|Romance</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n      <td>Comedy</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"# Statistical Analysis of Ratings","metadata":{}},{"cell_type":"code","source":"n_ratings = len(ratings)\nn_movies = len(ratings['movieId'].unique())\nn_users = len(ratings['userId'].unique())\nprint(f\"Number of ratings:  {n_ratings}\")\nprint(f\"Number of unique movieId's: {n_movies}\")\nprint(f\"Number of unique users:{n_users}\")\nprint(f\"Average ratings per user:{round(n_ratings/n_users, 2)}\")\nprint(f\"Average ratings per movie: {round(n_ratings/n_movies, 2)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:58:01.741426Z","iopub.execute_input":"2025-01-22T07:58:01.741789Z","iopub.status.idle":"2025-01-22T07:58:01.754067Z","shell.execute_reply.started":"2025-01-22T07:58:01.741759Z","shell.execute_reply":"2025-01-22T07:58:01.752879Z"}},"outputs":[{"name":"stdout","text":"Number of ratings:  100836\nNumber of unique movieId's: 9724\nNumber of unique users:610\nAverage ratings per user:165.3\nAverage ratings per movie: 10.37\n","output_type":"stream"}],"execution_count":17},{"cell_type":"markdown","source":"The above information is necessary to understand the properties of the dataset, including its size and the variety of people and movies inside it ","metadata":{}},{"cell_type":"markdown","source":"# User Rating frequency","metadata":{}},{"cell_type":"code","source":"user_freq = ratings[['userId','movieId']].groupby('userId').count().reset_index()\nuser_freq.columns = ['userId','n_ratings']\nuser_freq.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:58:04.745029Z","iopub.execute_input":"2025-01-22T07:58:04.745378Z","iopub.status.idle":"2025-01-22T07:58:04.759909Z","shell.execute_reply.started":"2025-01-22T07:58:04.745351Z","shell.execute_reply":"2025-01-22T07:58:04.758824Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   userId  n_ratings\n0       1        232\n1       2         29\n2       3         39\n3       4        216\n4       5         44","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>n_ratings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>232</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>39</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>216</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>44</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"* Here, we are classifying the data according to the user ID, wherein, it will calculate the total number of ratings each user has submitted and saves results in the new user_freq dataframe\n* As we want to do the additional user-based analysis and creation of recommendation systems, this user-level frequency is crucial for comprehending the user-engagement and activity inside the  rating dataset","metadata":{}},{"cell_type":"markdown","source":"# Movie Rating Analysis","metadata":{}},{"cell_type":"code","source":"# Find the lowest and highest rated movies \nmean_rating = ratings.groupby('movieId')[['rating']].mean()\n\n# Lowest rated movies \nlowest_rated = mean_rating['rating'].idxmin()\nmovies.loc[movies['movieId'] == lowest_rated]\n\n#Highest rated movies\nhighest_rated = mean_rating['rating'].idxmax()\nmovies.loc[movies['movieId'] == highest_rated]\n\n# Show number of people who rated movies rated movie highest\nratings[ratings['movieId']==highest_rated]\n\n\n# Show number of people who rated movies rated movie lowest\nratings[ratings['movieId']==lowest_rated]\n\n# We will use the bayesian average here\nmovie_stats = ratings.groupby('movieId')[['rating']].agg(['count','mean'])\nmovie_stats.columns = movie_stats.columns.droplevel()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:58:09.866114Z","iopub.execute_input":"2025-01-22T07:58:09.866501Z","iopub.status.idle":"2025-01-22T07:58:09.891055Z","shell.execute_reply.started":"2025-01-22T07:58:09.866458Z","shell.execute_reply":"2025-01-22T07:58:09.889493Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"The Bayesian average adjusts the movie's average rating by incorporating a global mean and a \"prior\" based on the number of ratings. It helps to smooth out movies with very few ratings, so that movies with only a few ratings don't end up with an unrealistic average rating.","metadata":{}},{"cell_type":"markdown","source":"The Bayesian Average formula is given by:\n\n$$\n\\text{Bayesian Average} = \\frac{C \\cdot \\text{movie\\_mean} + M \\cdot \\text{global\\_mean}}{C + M}\n$$\n\nWhere:\n- $C$ is the count of ratings for the movie.\n- $\\text{movie\\_mean}$ is the mean rating for the movie.\n- $\\text{global\\_mean}$ is the global mean rating.\n- $M$ is the constant (minimum number of ratings for reliability).\n","metadata":{}},{"cell_type":"markdown","source":"# User-Item Matrix Creation","metadata":{}},{"cell_type":"code","source":"ratings.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:58:33.179954Z","iopub.execute_input":"2025-01-22T07:58:33.180327Z","iopub.status.idle":"2025-01-22T07:58:33.190395Z","shell.execute_reply.started":"2025-01-22T07:58:33.180297Z","shell.execute_reply":"2025-01-22T07:58:33.189382Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   userId  movieId  rating  timestamp\n0       1        1     4.0  964982703\n1       1        3     4.0  964981247\n2       1        6     4.0  964982224\n3       1       47     5.0  964983815\n4       1       50     5.0  964982931","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4.0</td>\n      <td>964982703</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>964981247</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>964982224</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>5.0</td>\n      <td>964983815</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>5.0</td>\n      <td>964982931</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"movies.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:58:36.046186Z","iopub.execute_input":"2025-01-22T07:58:36.046558Z","iopub.status.idle":"2025-01-22T07:58:36.056605Z","shell.execute_reply.started":"2025-01-22T07:58:36.046528Z","shell.execute_reply":"2025-01-22T07:58:36.055428Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   movieId                               title  \\\n0        1                    Toy Story (1995)   \n1        2                      Jumanji (1995)   \n2        3             Grumpier Old Men (1995)   \n3        4            Waiting to Exhale (1995)   \n4        5  Father of the Bride Part II (1995)   \n\n                                        genres  \n0  Adventure|Animation|Children|Comedy|Fantasy  \n1                   Adventure|Children|Fantasy  \n2                               Comedy|Romance  \n3                         Comedy|Drama|Romance  \n4                                       Comedy  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n      <td>Adventure|Children|Fantasy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n      <td>Comedy|Romance</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n      <td>Comedy|Drama|Romance</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n      <td>Comedy</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"# Now, we create user-item matrix using scipy csr matrix \n\nfrom scipy.sparse import csr_matrix\n\ndef create_matrix(ratings):\n    N = len(ratings['userId'].unique())\n    M = len(ratings['movieId'].unique())\n    # Map Ids to indices\n    user_mapper = dict(zip(np.unique(ratings[\"userId\"]),list(range(N))))\n    movie_mapper = dict(zip(np.unique(ratings[\"movieId\"]),list(range(M))))\n\n    # Map indices to IDs\n    user_inv_mapper = dict(zip(list(range(N)), np.unique(ratings[\"userId\"])))\n    movie_inv_mapper = dict(zip(list(range(M)), np.unique(ratings[\"movieId\"])))\n\n    user_index = [user_mapper[i] for i in ratings['userId']]\n    movie_index = [movie_mapper[i] for i in ratings['movieId']]\n\n    X = csr_matrix((ratings[\"rating\"], (movie_index,user_index)), shape=(M,N))\n    return X, user_mapper, movie_mapper, user_inv_mapper, movie_inv_mapper\n\nX, user_mapper, movie_mapper, user_inv_mapper, movie_inv_mapper = create_matrix(ratings)\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T07:58:53.251581Z","iopub.execute_input":"2025-01-22T07:58:53.251989Z","iopub.status.idle":"2025-01-22T07:58:53.34587Z","shell.execute_reply.started":"2025-01-22T07:58:53.251958Z","shell.execute_reply":"2025-01-22T07:58:53.344644Z"}},"outputs":[],"execution_count":24},{"cell_type":"markdown","source":"# Movie Similarity Analysis","metadata":{}},{"cell_type":"code","source":"# Find similar movies using KNN\nfrom sklearn.neighbors import NearestNeighbors\ndef find_similar_movies(movie_id, X, k, metric='cosine', show_distance=False):\n    neighbour_ids = []\n    movie_ind = movie_mapper[movie_id]\n    movie_vec = X[movie_ind]\n    k+=1\n    kNN = NearestNeighbors(n_neighbors=k, algorithm=\"brute\", metric=metric)\n    kNN.fit(X)\n    movie_vec = movie_vec.reshape(1,-1)\n    neighbor = kNN.kneighbors(movie_vec, return_distance=show_distance)\n    for i in range(0,k):\n        n = neighbor.item(i)\n        neighbour_ids.append(movie_inv_mapper[n])\n    neighbour_ids.pop(0)\n    return neighbour_ids\n\nmovie_titles = dict(zip(movies['movieId'], movies['title']))\nmovie_id = 3 \nsimilar_ids = find_similar_movies(movie_id, X, k=10)\nmovie_title = movie_titles[movie_id]\n\nprint(f\"Since you watched {movie_title}\")\nfor i in similar_ids:\n    print(movie_titles[i])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:18:05.80798Z","iopub.execute_input":"2025-01-22T08:18:05.808312Z","iopub.status.idle":"2025-01-22T08:18:05.828165Z","shell.execute_reply.started":"2025-01-22T08:18:05.808284Z","shell.execute_reply":"2025-01-22T08:18:05.826315Z"}},"outputs":[{"name":"stdout","text":"Since you watched Grumpier Old Men (1995)\nGrumpy Old Men (1993)\nStriptease (1996)\nNutty Professor, The (1996)\nTwister (1996)\nFather of the Bride Part II (1995)\nBroken Arrow (1996)\nBio-Dome (1996)\nTruth About Cats & Dogs, The (1996)\nSabrina (1995)\nBirdcage, The (1996)\n","output_type":"stream"}],"execution_count":30},{"cell_type":"markdown","source":"In the above code \n* The function \"find_similar_movies\" uses the k-Nearest Neighbors(kNN) algorithm to idenfify moves that are similiar to the given movie\n* The function takes inputs such as the target movie ID, a user-item matrix(X), the number of neighbors to consider(k), a similiarity metric (default is cosine similiarity), and an option to show distances between movies\n* The function begins by initializing a blank list to hold the IDs of films that are comparable\n* It takes the target movie's index out of the movie_mapper dictionary and uses the user-item matric to acquire the feature vector that goes with it\n* After that, the KNN model is configured using given parameters\n* The distance and indices of the k-nearest neighbors to the target movie are calculated one the KNN model has been fitted.\n* Using the movie_inv_mapper dictionary, the loop retrieves these neighbor indices and maps them back to the movie IDs\n* Since it matches the desired movie, the first item in the list is eliminated\n* The code ends with a list of related movie titles and the title of the target film, suggesting movies based on the KNN model","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# Movie Recommendation with respect to Users Preference","metadata":{}},{"cell_type":"code","source":"def recommend_movies_for_user(user_id, X, user_mapper, movie_mapper, movie_inv_mapper, k=10):\n    df1 = ratings[ratings['userId'] == user_id]\n    if df1.empty:\n        print(f\"User with ID {user_id} does not exist.\")\n        return \n    movie_id = df1[df1['rating'] == max(df1['rating'])]['movieId'].iloc[0]\n    movie_titles = dict(zip(movies['movieId'], movies['title']))\n    similar_ids = find_similar_movies(movie_id, X, k)\n    movie_title = movie_titles.get(movie_id, \"Movie not found\")\n    if movie_title == \"Movie not found\":\n        print(f\"Movie with ID {movie_id} not found.\")\n        return\n\n    print(f\"Since you watched {movie_title}, you might also like:\")\n    for i in similar_ids:\n        print(movie_titles.get(i, \"Movie not found\"))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:47:55.876972Z","iopub.execute_input":"2025-01-22T08:47:55.877345Z","iopub.status.idle":"2025-01-22T08:47:55.884022Z","shell.execute_reply.started":"2025-01-22T08:47:55.877314Z","shell.execute_reply":"2025-01-22T08:47:55.882713Z"}},"outputs":[],"execution_count":38},{"cell_type":"markdown","source":"* The function accepts inputs from the dictionaries (user_mapper, movie_mapper, movie_inv_mapper) for mapping user and movie IDs to matrix indices\n* The user_id for which recommendations are desired\n* A user-item matrix X represents the movie ratings\n* An optional parameter k for the number of recommended movies (default is set to 10)\n* Initially, it filters the ratings dataset to see if the user with the given ID is there. It notifies the user that requested person does not exist and ends the function if the user does not exist\n* the code, if it exists designates the movie that has recieved the highest rating from that particular user\n* It finds the movieId of this movie and chooses it based on the highest rating\n* From the movies dataset, a dictionary called movie_titles is create tp map movie IDs to their titles\n* The function \"find_similar_movie\" locates films that are comparable to the movie in the user-item matrix that has the highest rating (denoted by movie_id). It gives back a list of comparable movie IDs\n","metadata":{}},{"cell_type":"markdown","source":"# Recommend the movies","metadata":{}},{"cell_type":"code","source":"user_id = 150 # Replace it with the desired userID\nrecommend_movies_for_user(user_id, X, user_mapper, movie_mapper, movie_inv_mapper, k=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:47:59.340463Z","iopub.execute_input":"2025-01-22T08:47:59.340881Z","iopub.status.idle":"2025-01-22T08:47:59.359814Z","shell.execute_reply.started":"2025-01-22T08:47:59.34085Z","shell.execute_reply":"2025-01-22T08:47:59.358395Z"}},"outputs":[{"name":"stdout","text":"Since you watched Twelve Monkeys (a.k.a. 12 Monkeys) (1995), you might also like:\nPulp Fiction (1994)\nTerminator 2: Judgment Day (1991)\nIndependence Day (a.k.a. ID4) (1996)\nSeven (a.k.a. Se7en) (1995)\nFargo (1996)\nFugitive, The (1993)\nUsual Suspects, The (1995)\nJurassic Park (1993)\nStar Wars: Episode IV - A New Hope (1977)\nHeat (1995)\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"user_id = 415 # Replace it with the desired userID\nrecommend_movies_for_user(user_id, X, user_mapper, movie_mapper, movie_inv_mapper, k=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:48:02.00252Z","iopub.execute_input":"2025-01-22T08:48:02.002917Z","iopub.status.idle":"2025-01-22T08:48:02.032698Z","shell.execute_reply.started":"2025-01-22T08:48:02.002887Z","shell.execute_reply":"2025-01-22T08:48:02.030955Z"}},"outputs":[{"name":"stdout","text":"Since you watched Pulp Fiction (1994), you might also like:\nSilence of the Lambs, The (1991)\nShawshank Redemption, The (1994)\nSeven (a.k.a. Se7en) (1995)\nForrest Gump (1994)\nUsual Suspects, The (1995)\nBraveheart (1995)\nFight Club (1999)\nFargo (1996)\nTerminator 2: Judgment Day (1991)\nReservoir Dogs (1992)\n","output_type":"stream"}],"execution_count":40},{"cell_type":"markdown","source":"* So this system used the sophisticated methods such as closes neighbors and matrix factorization to find the hidden patterns in the item attributes and user behavior\n* Recommendation systems are able to adjust and get better over time. ","metadata":{}},{"cell_type":"markdown","source":"# Key highlights of this project","metadata":{}},{"cell_type":"markdown","source":"\n1. **Recommendation Algorithms Mastery**: Implemented and compared user-based and item-based collaborative filtering techniques to build a personalized recommendation system using Python.  \n\n2. **Proficient Data Manipulation**: Utilized libraries like Pandas and NumPy for data preprocessing, cleaning, and organizing a sparse dataset of user-item interactions.  \n\n3. **Matrix Factorization Expertise**: Applied similarity measures such as cosine similarity and Pearson correlation to compute relationships between users and items effectively.  \n \n","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}}]}