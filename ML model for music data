{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10910364,"sourceType":"datasetVersion","datasetId":6782080},{"sourceId":10915562,"sourceType":"datasetVersion","datasetId":6785675}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dirgham/ml-model-for-music-data?scriptVersionId=225708032\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Library imports and loading the music dataset","metadata":{}},{"cell_type":"code","source":"import pandas as pd \n\nmusic_data = pd.read_csv(\"/kaggle/input/music-csv-file/music.csv\")\nmusic_data.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:42:36.148527Z","iopub.execute_input":"2025-03-04T13:42:36.148899Z","iopub.status.idle":"2025-03-04T13:42:36.629444Z","shell.execute_reply.started":"2025-03-04T13:42:36.148873Z","shell.execute_reply":"2025-03-04T13:42:36.628339Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   age  gender   genre\n0   20       1  HipHop\n1   23       1  HipHop\n2   25       1  HipHop\n3   26       1    Jazz\n4   29       1    Jazz","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>gender</th>\n      <th>genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20</td>\n      <td>1</td>\n      <td>HipHop</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>23</td>\n      <td>1</td>\n      <td>HipHop</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>25</td>\n      <td>1</td>\n      <td>HipHop</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26</td>\n      <td>1</td>\n      <td>Jazz</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>29</td>\n      <td>1</td>\n      <td>Jazz</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"music_data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:43:30.892579Z","iopub.execute_input":"2025-03-04T13:43:30.892955Z","iopub.status.idle":"2025-03-04T13:43:30.944304Z","shell.execute_reply.started":"2025-03-04T13:43:30.892928Z","shell.execute_reply":"2025-03-04T13:43:30.943319Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18 entries, 0 to 17\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   age     18 non-null     int64 \n 1   gender  18 non-null     int64 \n 2   genre   18 non-null     object\ndtypes: int64(2), object(1)\nmemory usage: 560.0+ bytes\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"# Model building ","metadata":{}},{"cell_type":"code","source":"X = music_data.drop(columns=['genre'])\nX","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:43:34.339996Z","iopub.execute_input":"2025-03-04T13:43:34.340324Z","iopub.status.idle":"2025-03-04T13:43:34.350124Z","shell.execute_reply.started":"2025-03-04T13:43:34.340297Z","shell.execute_reply":"2025-03-04T13:43:34.34893Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"    age  gender\n0    20       1\n1    23       1\n2    25       1\n3    26       1\n4    29       1\n5    30       1\n6    31       1\n7    33       1\n8    37       1\n9    20       0\n10   21       0\n11   25       0\n12   26       0\n13   27       0\n14   30       0\n15   31       0\n16   34       0\n17   35       0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>23</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>25</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>29</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>30</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>31</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>37</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>20</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>25</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>26</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>27</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>34</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>35</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"y = music_data['genre']\ny","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:43:37.296101Z","iopub.execute_input":"2025-03-04T13:43:37.296422Z","iopub.status.idle":"2025-03-04T13:43:37.303547Z","shell.execute_reply.started":"2025-03-04T13:43:37.296397Z","shell.execute_reply":"2025-03-04T13:43:37.302466Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"0        HipHop\n1        HipHop\n2        HipHop\n3          Jazz\n4          Jazz\n5          Jazz\n6     Classical\n7     Classical\n8     Classical\n9         Dance\n10        Dance\n11        Dance\n12     Acoustic\n13     Acoustic\n14     Acoustic\n15    Classical\n16    Classical\n17    Classical\nName: genre, dtype: object"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\n\nX = music_data.drop(columns=['genre'])\ny = music_data['genre']\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X,y)\nmusic_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:43:47.120614Z","iopub.execute_input":"2025-03-04T13:43:47.121003Z","iopub.status.idle":"2025-03-04T13:43:47.136929Z","shell.execute_reply.started":"2025-03-04T13:43:47.120975Z","shell.execute_reply":"2025-03-04T13:43:47.135985Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"    age  gender      genre\n0    20       1     HipHop\n1    23       1     HipHop\n2    25       1     HipHop\n3    26       1       Jazz\n4    29       1       Jazz\n5    30       1       Jazz\n6    31       1  Classical\n7    33       1  Classical\n8    37       1  Classical\n9    20       0      Dance\n10   21       0      Dance\n11   25       0      Dance\n12   26       0   Acoustic\n13   27       0   Acoustic\n14   30       0   Acoustic\n15   31       0  Classical\n16   34       0  Classical\n17   35       0  Classical","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>gender</th>\n      <th>genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20</td>\n      <td>1</td>\n      <td>HipHop</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>23</td>\n      <td>1</td>\n      <td>HipHop</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>25</td>\n      <td>1</td>\n      <td>HipHop</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26</td>\n      <td>1</td>\n      <td>Jazz</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>29</td>\n      <td>1</td>\n      <td>Jazz</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>30</td>\n      <td>1</td>\n      <td>Jazz</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>31</td>\n      <td>1</td>\n      <td>Classical</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>33</td>\n      <td>1</td>\n      <td>Classical</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>37</td>\n      <td>1</td>\n      <td>Classical</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>20</td>\n      <td>0</td>\n      <td>Dance</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>21</td>\n      <td>0</td>\n      <td>Dance</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>25</td>\n      <td>0</td>\n      <td>Dance</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>26</td>\n      <td>0</td>\n      <td>Acoustic</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>27</td>\n      <td>0</td>\n      <td>Acoustic</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>30</td>\n      <td>0</td>\n      <td>Acoustic</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>31</td>\n      <td>0</td>\n      <td>Classical</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>34</td>\n      <td>0</td>\n      <td>Classical</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>35</td>\n      <td>0</td>\n      <td>Classical</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\n\nX = music_data.drop(columns=['genre'])\ny = music_data['genre']\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X,y)\npredictions = model.predict([[21, 1], [22, 0]])\npredictions","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:43:50.799548Z","iopub.execute_input":"2025-03-04T13:43:50.799949Z","iopub.status.idle":"2025-03-04T13:43:50.815577Z","shell.execute_reply.started":"2025-03-04T13:43:50.799919Z","shell.execute_reply":"2025-03-04T13:43:50.814577Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n  warnings.warn(\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"array(['HipHop', 'Dance'], dtype=object)"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"* We used the DecisionTreeClassifier in the above code to make the age group and their preference-related predictions\n* Now, we will determine the accuracy of these predictions","metadata":{}},{"cell_type":"code","source":"    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import accuracy_score\n    \n    X = music_data.drop(columns=['genre'])\n    y = music_data['genre']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    \n    model = DecisionTreeClassifier()\n    model.fit(X_train,y_train)\n    predictions = model.predict(X_test)\n    \n    score = accuracy_score(y_test, predictions)\n    score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:43:53.788252Z","iopub.execute_input":"2025-03-04T13:43:53.788616Z","iopub.status.idle":"2025-03-04T13:43:53.805542Z","shell.execute_reply.started":"2025-03-04T13:43:53.788588Z","shell.execute_reply":"2025-03-04T13:43:53.804581Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"0.75"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"* An accuracy score of 1 (100%) in a machine learning model means the model perfectly classified all instances in the dataset\n* Also, the 100% of the accuracy score is because of the simplicity of the current dataset","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX = music_data.drop(columns=['genre'])\ny = music_data['genre']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train,y_train)\npredictions = model.predict(X_test)\n\nscore = accuracy_score(y_test, predictions)\nscore","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:43:56.892013Z","iopub.execute_input":"2025-03-04T13:43:56.892332Z","iopub.status.idle":"2025-03-04T13:43:56.906685Z","shell.execute_reply.started":"2025-03-04T13:43:56.892304Z","shell.execute_reply":"2025-03-04T13:43:56.90578Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"1.0"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX = music_data.drop(columns=['genre'])\ny = music_data['genre']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8)\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train,y_train)\npredictions = model.predict(X_test)\n\nscore = accuracy_score(y_test, predictions)\nscore","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T13:44:57.052692Z","iopub.execute_input":"2025-03-04T13:44:57.053042Z","iopub.status.idle":"2025-03-04T13:44:57.067586Z","shell.execute_reply.started":"2025-03-04T13:44:57.053016Z","shell.execute_reply":"2025-03-04T13:44:57.066573Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"0.3333333333333333"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nimport joblib\n\nX = music_data.drop(columns=['genre'])\ny = music_data['genre']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8)\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X,y)\n\njoblib.dump(model, 'music-recommender.joblib')\n\n# predictions = model.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:00:02.132825Z","iopub.execute_input":"2025-03-04T14:00:02.133149Z","iopub.status.idle":"2025-03-04T14:00:02.147388Z","shell.execute_reply.started":"2025-03-04T14:00:02.133124Z","shell.execute_reply":"2025-03-04T14:00:02.146349Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"['music-recommender.joblib']"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\n\nX = music_data.drop(columns=['genre'])\ny = music_data['genre']\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X,y)\n\ntree.export_graphviz(model, out_file='music-recommender.dot',\n                    feature_names=['age', 'gender'],\n                    class_names=sorted(y.unique()),\n                    rounded=True,\n                    filled=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:25:16.216465Z","iopub.execute_input":"2025-03-04T14:25:16.216855Z","iopub.status.idle":"2025-03-04T14:25:16.228745Z","shell.execute_reply.started":"2025-03-04T14:25:16.216826Z","shell.execute_reply":"2025-03-04T14:25:16.227553Z"}},"outputs":[],"execution_count":20}]}